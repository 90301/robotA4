#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include "geometry_msgs/Point32.h"
#include "sensor_msgs/LaserScan.h"
#include <pcl_ros/point_cloud.h>
//#include <pcl_ros/point_types.h>
#include <cstdlib> // Needed for rand()
#include <ctime> // Needed to seed random number generator with a time value
#include <math.h>
class RandomWalk 
{
    public:
        RandomWalk(ros::NodeHandle& nh) :
            fsm(FSM_MOVE_FORWARD),
            rotateStartTime(ros::Time::now()),
            rotateDuration(0.f) 
    {
        srand(time(NULL));
        commandPub = nh.advertise<geometry_msgs::Twist>("/cmd_vel_mux/input/navi", 1); 
        laserSub = nh.subscribe("scan", 1, &RandomWalk::commandCallback, this);
        cloudSub = nh.subscribe("camera/depth_registered/points", 1, &RandomWalk::pointCloudCallback, this);
    };
        void move(double linearVelMPS, double angularVelRadPS) 
        {
            geometry_msgs::Twist msg; // The default constructor will set all commands to 0
            msg.linear.x = linearVelMPS;
            msg.angular.z = angularVelRadPS;
            commandPub.publish(msg);
        };

        void pointCloudCallback( const pcl::PointCloud<pcl::PointXYZ>& cloud ) 
        {
            float minz = 9999;
            float maxz = -9999;
            float currentPoint, average;
            int count =0;

            for(int i =0; i <= 639; i++)
            {
                currentPoint = cloud.points[640*420+i].z;
                if(!isnan(currentPoint)) 
                {
                    average+= currentPoint;
                    count++;
                }
                if(currentPoint > maxz) maxz = currentPoint;
                if(currentPoint < minz) minz = currentPoint;
            }

            if (average/count > FLOOR_RANGE_M)
            {
                gFlag = 1;
                ROS_INFO_STREAM("minZ = "<<minz<<" maxZ = "<<maxz<<" average = "<<(average/count));
            }
            else gFlag = 0;
        }

        void commandCallback(const sensor_msgs::LaserScan::ConstPtr& msg) 
        {
            if (fsm == FSM_MOVE_FORWARD) 
            {
                unsigned int minIndex = ceil((MIN_SCAN_ANGLE_RAD - msg->angle_min) / msg->angle_increment);
                unsigned int maxIndex = ceil((MAX_SCAN_ANGLE_RAD - msg->angle_min) / msg->angle_increment);
                float closestRange = msg->ranges[minIndex];
                for (unsigned int currIndex = minIndex + 1; currIndex < maxIndex; currIndex++) 
                {
                    if (msg->ranges[currIndex] < closestRange) 
                    {
                        closestRange = msg->ranges[currIndex];
                    }
                }
                if (isnan(closestRange)) 
                    closestRange = 10;

                if (closestRange > PROXIMITY_RANGE_M && !gFlag)
                    fsm = FSM_MOVE_FORWARD;
                else
                {
                    fsm = FSM_ROTATE;
                    rotateStartTime = ros::Time::now();				
                    rotateDuration = ros::Duration(rand() % 5);
                }			
            }
        };

        void spin() 
        {
            ros::Rate rate(10); // Specify the FSM loop rate in Hz
            while (ros::ok()) { // Keep spinning loop until user presses Ctrl+C

                if (fsm == FSM_MOVE_FORWARD)
                    move(FORWARD_SPEED_MPS, 0); // Move forward
                else
                {
                    int rot_dir = 0;
                    if (rand()%2)
                        rot_dir = 1;
                    else 
                        rot_dir = -1;

                    while ((ros::Time::now() - rotateStartTime) < rotateDuration)
                    {	
                        move(0, ROTATE_SPEED_RADPS);
                    }
                    fsm = FSM_MOVE_FORWARD;
                }


                ros::spinOnce(); // Need to call this function often to allow ROS to process incoming messages
                rate.sleep(); // Sleep for the rest of the cycle, to enforce the FSM loop rate
            }
        }; 
        
        enum FSM {
            FSM_MOVE_FORWARD, 
            FSM_ROTATE
        };

        const static double MIN_SCAN_ANGLE_RAD = -15.0 / 180 * M_PI;
        const static double MAX_SCAN_ANGLE_RAD = +15.0 / 180 * M_PI;
        const static float PROXIMITY_RANGE_M = 1; 
        const static float FLOOR_RANGE_M = 1.2;
        const static double FORWARD_SPEED_MPS = 0.15;
        const static double ROTATE_SPEED_RADPS = M_PI / 8;

        int gFlag;
    protected:
        ros::Publisher commandPub;
        ros::Subscriber laserSub;
        ros::Subscriber cloudSub;
        enum FSM fsm; 
        ros::Time rotateStartTime;
        ros::Duration rotateDuration;
};
int main(int argc, char **argv) 
{
    ros::init(argc, argv, "random_walk");
    ros::NodeHandle n;
    RandomWalk walker(n);
    walker.spin();
    return 0;
};
